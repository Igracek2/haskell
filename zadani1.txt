module SimpleMaze where

-------------------------
-- TYPE AND PRINT
-------------------------
type Maze = [String]

printMaze :: Maze -> IO ()
printMaze x = putStr (concat (map (++"\n") x))

sample4 :: Maze
sample4 = ["*********",
           "*s*   *e*",
           "* *   * *",
           "* *   * *",
           "*       *",
           "******* *",
           "        *",
           "*********"]

-------------------------
-- 1) ABOVE
-------------------------
above :: Maze -> Maze -> Maze
above m1 m2 = m1 ++ m2

-------------------------
-- 2) SIDE BY SIDE
-------------------------
sideBySide :: Maze -> Maze -> Maze
sideBySide []         []         = []
sideBySide (row1:xs1) (row2:xs2) = (row1 ++ row2) : sideBySide xs1 xs2
sideBySide x          []         = x
sideBySide []         y          = y

-------------------------
-- 3) ROTATIONS
-------------------------
take' :: Int -> [a] -> [a]
take' 0 _      = []
take' _ []     = []
take' n (x:xs) = x : take' (n-1) xs

drop' :: Int -> [a] -> [a]
drop' 0 xs     = xs
drop' _ []     = []
drop' n (_:xs) = drop' (n-1) xs

transpose :: Maze -> Maze
transpose []     = []
transpose ([]:_) = []
transpose rows   =
  let heads = map head rows
      tails = map tail rows
  in heads : transpose tails

rotateR :: Maze -> Maze
rotateR m = transpose (reverse m)

rotateL :: Maze -> Maze
rotateL m = reverse (transpose m)

-------------------------
-- 4) GET FROM MAZE
-------------------------
getFromMaze :: Maze -> (Int, Int) -> Char
getFromMaze maze (r, c) = (maze !! r) !! c

-------------------------
-- 5) PUT INTO MAZE
-------------------------
replaceChar :: String -> Int -> Char -> String
replaceChar []     _ _  = []
replaceChar (x:xs) 0 ch = ch : xs
replaceChar (x:xs) n ch = x : replaceChar xs (n-1) ch

putIntoMaze :: Maze -> [(Int, Int, Char)] -> Maze
putIntoMaze maze [] = maze
putIntoMaze maze ((row, col, ch):rest) =
    let newMaze = putOne maze row col ch
    in putIntoMaze newMaze rest

putOne :: Maze -> Int -> Int -> Char -> Maze
putOne (r:rs) 0 col ch = replaceChar r col ch : rs
putOne (r:rs) n col ch = r : putOne rs (n-1) col ch
putOne []     _ _   _  = []

-------------------------
-- 6) GET PART
-------------------------
getPart :: Maze -> (Int, Int) -> (Int, Int) -> Maze
getPart maze (startR, startC) (h, w) =
  let slicedRows = take' h (drop' startR maze)
  in map (\row -> take' w (drop' startC row)) slicedRows

-------------------------
-- 7) SOLVE MAZE (BFS) - původní varianta (vrací vzdálenost)
-------------------------
solveMaze :: Maze -> Int
solveMaze maze =
  let sPos    = findStart maze
      initial = [(fst sPos, snd sPos, 0)] -- (r, c, distance=0)
  in bfs maze initial [(fst sPos, snd sPos)]  -- visited

findStart :: Maze -> (Int, Int)
findStart maze = findHelper maze 0
  where
    findHelper []     _    = error "No 's' in maze!"
    findHelper (r:rs) row =
      case elemIndex 's' r of
        Just col -> (row, col)
        Nothing  -> findHelper rs (row+1)

elemIndex :: Char -> String -> Maybe Int
elemIndex _ []     = Nothing
elemIndex ch (x:xs)
  | ch == x    = Just 0
  | otherwise  = case elemIndex ch xs of
      Just i  -> Just (i+1)
      Nothing -> Nothing

bfs :: Maze -> [(Int,Int,Int)] -> [(Int,Int)] -> Int
bfs _    []                  _       = -1
bfs maze ((r,c,d):rest) visited =
  let ch = getFromMaze maze (r,c)
  in if ch == 'e'
     then d
     else
       let neighbors  = [(r-1,c),(r+1,c),(r,c-1),(r,c+1)]
           validN     = filter (isValid maze visited) neighbors
           newQueue   = rest ++ [(nr,nc,d+1) | (nr,nc) <- validN]
           newVisited = visited ++ validN
       in bfs maze newQueue newVisited

isValid :: Maze -> [(Int,Int)] -> (Int,Int) -> Bool
isValid maze visited (rr,cc) =
    inRange rr (length maze) &&
    inRange cc (length (head maze)) &&
    notElem (rr,cc) visited &&
    let ch = getFromMaze maze (rr,cc)
    in ch /= '*'

inRange :: Int -> Int -> Bool
inRange i maxVal = (i >= 0) && (i < maxVal)

-------------------------
-- 7b) NOVÁ varianta BFS, která vrací cestu ve formě [Char]
-------------------------
-- Definujeme čtyři směry a příslušnou změnu řádku/sloupce.
-- Písmena 'u','d','l','r' pak slouží k rekonstrukci path.
-------------------------
directions :: [(Char,(Int,Int))]
directions = [
    ('u',(-1,0)),
    ('d',( 1,0)),
    ('l',( 0,-1)),
    ('r',( 0, 1))
  ]

-- BFS, která kromě fronty a visited ukládá i dosud ušlou cestu (path).
bfsPath :: Maze -> [((Int,Int), [Char])] -> [(Int,Int)] -> Maybe [Char]
bfsPath _    []               _       = Nothing
bfsPath maze (((r,c),path):queue) visited =
  let ch = getFromMaze maze (r,c)
  in if ch == 'e'
     -- Pokud jsme v cíli, vrátíme nashromážděnou cestu.
     then Just path
     else
       -- Jinak rozšíříme BFS o sousedy.
       let nextSteps = concatMap
             (\(dir,(dr,dc)) ->
                let nr = r + dr
                    nc = c + dc
                in if isValid maze visited (nr,nc)
                   then [((nr,nc), path ++ [dir])]
                   else [])
             directions
           newVisited = visited ++ map fst nextSteps
           newQueue   = queue ++ nextSteps
       in bfsPath maze newQueue newVisited

-- Jednoduchý "wrapper": najde start 's' a zavolá bfsPath.
solveMazeWithPath :: Maze -> Maybe [Char]
solveMazeWithPath maze =
  let sPos = findStart maze
  in bfsPath maze [(sPos, [])] [sPos]

-------------------------
-- 8) OZNAČENÍ NALEZENÉ CESTY V MAZE
-------------------------
-- Níže je ukázka jedné z možných implementací:
--   - stepMove (r,c) 'u' = (r-1,c), atd.
--   - putCharInMaze aktualizuje 1 políčko v Maze
--   - markPath celou cestu vyznačí například znakem '+'
-------------------------
replaceCharInRow :: String -> Int -> Char -> String
replaceCharInRow row col ch = take col row ++ [ch] ++ drop (col+1) row

putCharInMaze :: Maze -> (Int,Int) -> Char -> Maze
putCharInMaze maze (r,c) ch =
  take r maze
  ++ [replaceCharInRow (maze !! r) c ch]
  ++ drop (r+1) maze

stepMove :: (Int,Int) -> Char -> (Int,Int)
stepMove (r,c) d =
  case d of
    'u' -> (r-1, c)
    'd' -> (r+1, c)
    'l' -> (r, c-1)
    'r' -> (r, c+1)
    _   -> (r,c)

markPath :: Maze -> (Int,Int) -> [Char] -> Maze
markPath maze start path =
  let
    go m _   []     = m
    go m pos (d:ds) =
      let newPos = stepMove pos d
          m2     = putCharInMaze m newPos '+'
      in go m2 newPos ds
    -- Označíme start také pluskem (aby bylo jasně vidět, kde se začínalo).
    mStart = putCharInMaze maze start '+'
  in go mStart start path

-------------------------
-- MAIN
-------------------------
main :: IO ()
main = do
    putStrLn "Original maze:"
    printMaze sample4
    
    putStrLn "\nMaze above itself:"
    printMaze (above sample4 sample4)
    
    putStrLn "\nMaze side by side with itself:"
    printMaze (sideBySide sample4 sample4)
    
    putStrLn "\nMaze rotated to the right:"
    printMaze (rotateR sample4)
    
    putStrLn "\nMaze rotated to the left:"
    printMaze (rotateL sample4)
    
    putStrLn "\nCharacter at position (1,1):"
    print $ getFromMaze sample4 (1,1)
    
    putStrLn "\nMaze after putting characters:"
    let modifiedMaze = putIntoMaze sample4 [(0,0,'1'),(6,6,'2'),(0,6,'3')]
    printMaze modifiedMaze
    
    putStrLn "\nPart of the maze from (1,1) with size (4,4):"
    let partOfMaze = getPart sample4 (1,1) (4,4)
    printMaze partOfMaze
    
    putStrLn "\nSolving the maze (distance only)..."
    let solution = solveMaze sample4
    if solution /= -1
        then putStrLn $ "Maze solved! Distance to exit: " ++ show solution
        else putStrLn "No solution found for the maze!"
    
    putStrLn "\nSolving the maze and marking the path..."
    case solveMazeWithPath sample4 of
      Nothing   -> putStrLn "No path found!"
      Just path -> do
        putStrLn $ "Path found: " ++ show path
        let sPos = findStart sample4
            mazeWithPath = markPath sample4 sPos path
        putStrLn "Maze with path marked as '+':"
        printMaze mazeWithPath
