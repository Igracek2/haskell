findPath :: Maze -> (Int, Int) -> (Int, Int) -> Maybe [(Int, Int)]
findPath maze start goal =
    bfsPath [(start, [start])] [start]
  where
    bfsPath [] _ = Nothing
    bfsPath ((pos@(r,c), path):queue) visited
      | pos == goal = Just path
      | otherwise   =
          let neighbors = [(r-1,c),(r+1,c),(r,c-1),(r,c+1)]
              validN    = [ n | n <- neighbors, isValidCoord maze visited n ]
              newVis    = visited ++ validN
              newQueue  = queue ++ [(n, path ++ [n]) | n <- validN]
          in bfsPath newQueue newVis

    isValidCoord :: Maze -> [(Int,Int)] -> (Int,Int) -> Bool
    isValidCoord mz visited (rr,cc) =
      inRange rr (length mz) &&
      inRange cc (length (head mz)) &&
      (rr, cc) `notElem` visited &&
      getFromMaze mz (rr, cc) /= '*'

makePath :: Maze -> (Int, Int) -> (Int, Int) -> Maze
makePath maze start end =
    case findPath maze start end of
      Nothing    -> maze
      Just path  -> putPathNumbers maze path

putPathNumbers :: Maze -> [(Int, Int)] -> Maze
putPathNumbers maze coords =
  let indexedCoords = zip [1..] coords
      updates = map (\(i, (r,c)) -> (r, c, head (show i))) indexedCoords
  in putIntoMaze maze updates







   -- 7) Solve Maze (distance from 's' to 'e')
    putStrLn "\nSolving the maze (sample4) for distance 's' -> 'e'..."
    let solutionDist = solveMaze sample4
    if solutionDist /= -1
        then putStrLn $ "Maze solved! Distance to exit: " ++ show solutionDist
        else putStrLn "No solution found for the maze!"

    -- 8) makePath example (číslovaná cesta)
    putStrLn "\nmakePath on sample1 from (1,1) to (4,5):"
    let maze1WithPath = makePath sample1 (1,1) (4,5)
    printMaze maze1WithPath

    putStrLn "\nmakePath on sample2 from (4,1) to (1,4):"
    let maze2WithPath = makePath sample2 (4,1) (1,4)
    printMaze maze2WithPath
